{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Load all the channels within this directory and all subdirectories.\n// Channel files must be named *_channel.js.\nvar channels = require.context('.', true, /_channel\\.js$/);\n\nchannels.keys().forEach(channels);\n\nfunction movieBooking() {\n  var container = document.querySelector('.container');\n  var seats = document.querySelectorAll('.row .seat:not(.occupied)');\n  var count = document.getElementById('count');\n  var price = document.getElementById('price');\n  var movieSelect = document.getElementById('movie');\n  var ticketPrice = +movieSelect.value;\n\n  var populateUI = function populateUI() {\n    var selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'));\n\n    if (selectedSeats !== null && selectedSeats.length > 0) {\n      seats.forEach(function (seat, index) {\n        if (selectedSeats.indexOf(index) > -1) {\n          seat.classList.add('selected');\n        }\n      });\n    }\n\n    var selectedMovieIndex = localStorage.getItem('selectedMovieIndex');\n    var selectedMoviePrice = localStorage.getItem('selectedMoviePrice');\n\n    if (selectedMovieIndex !== null) {\n      movieSelect.selectedIndex = selectedMovieIndex;\n    }\n\n    if (selectedMoviePrice !== null) {\n      count.innerText = selectedSeats.length;\n      price.innerText = selectedSeats.length * +selectedMoviePrice;\n    }\n  };\n\n  populateUI();\n\n  selectedMovie = function selectedMovie(movieIndex, moviePrice) {\n    localStorage.setItem('selectedMovieIndex', movieIndex);\n    localStorage.setItem('selectedMoviePrice', moviePrice);\n  };\n\n  var updateSelectedSeatsCount = function updateSelectedSeatsCount() {\n    var selectedSeats = document.querySelectorAll('.row .selected');\n\n    var seatsIndex = _toConsumableArray(selectedSeats).map(function (seat) {\n      return _toConsumableArray(seats).indexOf(seat);\n    });\n\n    localStorage.setItem('selectedSeats', JSON.stringify(seatsIndex));\n    var selectedSeatsCount = selectedSeats.length;\n    count.innerText = selectedSeatsCount;\n    price.innerText = selectedSeatsCount * ticketPrice;\n  }; // Seat select event\n\n\n  container.addEventListener('click', function (e) {\n    if (e.target.classList.contains('seat') && !e.target.classList.contains('occupied')) {\n      e.target.classList.toggle('selected');\n      updateSelectedSeatsCount();\n    }\n  }); // Movie select event\n\n  movieSelect.addEventListener('change', function (e) {\n    ticketPrice = +e.target.value;\n    selectedMovie(e.target.selectedIndex, e.target.value);\n    updateSelectedSeatsCount();\n  });\n}","map":{"version":3,"sources":["/home/girish/Documents/Projects/simple-movie-booking-master/app/javascript/channels/index.js"],"names":["channels","require","context","keys","forEach","movieBooking","container","document","querySelector","seats","querySelectorAll","count","getElementById","price","movieSelect","ticketPrice","value","populateUI","selectedSeats","JSON","parse","localStorage","getItem","length","seat","index","indexOf","classList","add","selectedMovieIndex","selectedMoviePrice","selectedIndex","innerText","selectedMovie","movieIndex","moviePrice","setItem","updateSelectedSeatsCount","seatsIndex","map","stringify","selectedSeatsCount","addEventListener","e","target","contains","toggle"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAACC,OAAR,CAAgB,GAAhB,EAAqB,IAArB,EAA2B,eAA3B,CAAjB;;AACAF,QAAQ,CAACG,IAAT,GAAgBC,OAAhB,CAAwBJ,QAAxB;;AAEA,SAASK,YAAT,GAAwB;AACvB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAlB;AACA,MAAMC,KAAK,GAAGF,QAAQ,CAACG,gBAAT,CAA0B,2BAA1B,CAAd;AACA,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,cAAT,CAAwB,OAAxB,CAAd;AACA,MAAMC,KAAK,GAAGN,QAAQ,CAACK,cAAT,CAAwB,OAAxB,CAAd;AAEA,MAAME,WAAW,GAAGP,QAAQ,CAACK,cAAT,CAAwB,OAAxB,CAApB;AACA,MAAIG,WAAW,GAAG,CAACD,WAAW,CAACE,KAA/B;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,CAAtB;;AAEA,QAAIJ,aAAa,KAAK,IAAlB,IAA0BA,aAAa,CAACK,MAAd,GAAuB,CAArD,EAAwD;AACtDd,MAAAA,KAAK,CAACL,OAAN,CAAc,UAACoB,IAAD,EAAOC,KAAP,EAAiB;AAC7B,YAAIP,aAAa,CAACQ,OAAd,CAAsBD,KAAtB,IAA+B,CAAC,CAApC,EAAuC;AACrCD,UAAAA,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmB,UAAnB;AACD;AACF,OAJD;AAKD;;AAED,QAAMC,kBAAkB,GAAGR,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAA3B;AACA,QAAMQ,kBAAkB,GAAGT,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAA3B;;AAEA,QAAIO,kBAAkB,KAAK,IAA3B,EAAiC;AAC/Bf,MAAAA,WAAW,CAACiB,aAAZ,GAA4BF,kBAA5B;AACD;;AAED,QAAIC,kBAAkB,KAAK,IAA3B,EAAiC;AAC/BnB,MAAAA,KAAK,CAACqB,SAAN,GAAkBd,aAAa,CAACK,MAAhC;AACAV,MAAAA,KAAK,CAACmB,SAAN,GAAkBd,aAAa,CAACK,MAAd,GAAuB,CAACO,kBAA1C;AACD;AACF,GAtBD;;AAwBAb,EAAAA,UAAU;;AAEVgB,EAAAA,aAAa,GAAG,uBAACC,UAAD,EAAaC,UAAb,EAA4B;AAC1Cd,IAAAA,YAAY,CAACe,OAAb,CAAqB,oBAArB,EAA2CF,UAA3C;AACAb,IAAAA,YAAY,CAACe,OAAb,CAAqB,oBAArB,EAA2CD,UAA3C;AACD,GAHD;;AAKA,MAAME,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrC,QAAMnB,aAAa,GAAGX,QAAQ,CAACG,gBAAT,CAA0B,gBAA1B,CAAtB;;AAEA,QAAM4B,UAAU,GAAG,mBAAIpB,aAAJ,EAAmBqB,GAAnB,CAAuB,UAAAf,IAAI;AAAA,aAAI,mBAAIf,KAAJ,EAAWiB,OAAX,CAAmBF,IAAnB,CAAJ;AAAA,KAA3B,CAAnB;;AAEAH,IAAAA,YAAY,CAACe,OAAb,CAAqB,eAArB,EAAsCjB,IAAI,CAACqB,SAAL,CAAeF,UAAf,CAAtC;AAEA,QAAMG,kBAAkB,GAAGvB,aAAa,CAACK,MAAzC;AAEAZ,IAAAA,KAAK,CAACqB,SAAN,GAAkBS,kBAAlB;AACA5B,IAAAA,KAAK,CAACmB,SAAN,GAAkBS,kBAAkB,GAAG1B,WAAvC;AACD,GAXD,CAxCuB,CAqDvB;;;AACAT,EAAAA,SAAS,CAACoC,gBAAV,CAA2B,OAA3B,EAAoC,UAAAC,CAAC,EAAI;AACvC,QACEA,CAAC,CAACC,MAAF,CAASjB,SAAT,CAAmBkB,QAAnB,CAA4B,MAA5B,KACA,CAACF,CAAC,CAACC,MAAF,CAASjB,SAAT,CAAmBkB,QAAnB,CAA4B,UAA5B,CAFH,EAGE;AACAF,MAAAA,CAAC,CAACC,MAAF,CAASjB,SAAT,CAAmBmB,MAAnB,CAA0B,UAA1B;AAEAT,MAAAA,wBAAwB;AACzB;AACF,GATD,EAtDuB,CAiEvB;;AACAvB,EAAAA,WAAW,CAAC4B,gBAAZ,CAA6B,QAA7B,EAAuC,UAAAC,CAAC,EAAI;AAC1C5B,IAAAA,WAAW,GAAG,CAAC4B,CAAC,CAACC,MAAF,CAAS5B,KAAxB;AACAiB,IAAAA,aAAa,CAACU,CAAC,CAACC,MAAF,CAASb,aAAV,EAAyBY,CAAC,CAACC,MAAF,CAAS5B,KAAlC,CAAb;AAEAqB,IAAAA,wBAAwB;AACzB,GALD;AAMA","sourcesContent":["// Load all the channels within this directory and all subdirectories.\n// Channel files must be named *_channel.js.\n\nconst channels = require.context('.', true, /_channel\\.js$/)\nchannels.keys().forEach(channels)\n\nfunction movieBooking() {\n\tconst container = document.querySelector('.container');\n\tconst seats = document.querySelectorAll('.row .seat:not(.occupied)');\n\tconst count = document.getElementById('count');\n\tconst price = document.getElementById('price');\n\n\tconst movieSelect = document.getElementById('movie');\n\tlet ticketPrice = +movieSelect.value;\n\n\tconst populateUI = () => {\n\t  const selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'));\n\n\t  if (selectedSeats !== null && selectedSeats.length > 0) {\n\t    seats.forEach((seat, index) => {\n\t      if (selectedSeats.indexOf(index) > -1) {\n\t        seat.classList.add('selected');\n\t      }\n\t    });\n\t  }\n\n\t  const selectedMovieIndex = localStorage.getItem('selectedMovieIndex');\n\t  const selectedMoviePrice = localStorage.getItem('selectedMoviePrice');\n\n\t  if (selectedMovieIndex !== null) {\n\t    movieSelect.selectedIndex = selectedMovieIndex;\n\t  }\n\n\t  if (selectedMoviePrice !== null) {\n\t    count.innerText = selectedSeats.length;\n\t    price.innerText = selectedSeats.length * +selectedMoviePrice;\n\t  }\n\t};\n\n\tpopulateUI();\n\n\tselectedMovie = (movieIndex, moviePrice) => {\n\t  localStorage.setItem('selectedMovieIndex', movieIndex);\n\t  localStorage.setItem('selectedMoviePrice', moviePrice);\n\t};\n\n\tconst updateSelectedSeatsCount = () => {\n\t  const selectedSeats = document.querySelectorAll('.row .selected');\n\n\t  const seatsIndex = [...selectedSeats].map(seat => [...seats].indexOf(seat));\n\n\t  localStorage.setItem('selectedSeats', JSON.stringify(seatsIndex));\n\n\t  const selectedSeatsCount = selectedSeats.length;\n\n\t  count.innerText = selectedSeatsCount;\n\t  price.innerText = selectedSeatsCount * ticketPrice;\n\t};\n\n\t// Seat select event\n\tcontainer.addEventListener('click', e => {\n\t  if (\n\t    e.target.classList.contains('seat') &&\n\t    !e.target.classList.contains('occupied')\n\t  ) {\n\t    e.target.classList.toggle('selected');\n\n\t    updateSelectedSeatsCount();\n\t  }\n\t});\n\n\t// Movie select event\n\tmovieSelect.addEventListener('change', e => {\n\t  ticketPrice = +e.target.value;\n\t  selectedMovie(e.target.selectedIndex, e.target.value);\n\n\t  updateSelectedSeatsCount();\n\t});\n}"]},"metadata":{},"sourceType":"module"}